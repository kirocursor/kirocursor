name: 🔒 Security Scan & Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Ejecutar escaneo de seguridad diariamente a las 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'MS Distribution Microservice'
        path: '.'
        format: 'HTML'
        out: 'reports'
        args: >
          --failOnCVSS 7
          --enableRetired
          
    - name: Upload OWASP report
      uses: actions/upload-artifact@v3
      with:
        name: owasp-dependency-check-report
        path: reports/
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy results
      uses: actions/upload-artifact@v3
      with:
        name: trivy-vulnerability-report
        path: trivy-results.sarif

  security-testing:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn test
      
    - name: Security test with OWASP ZAP
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'http://localhost:8086'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: docker build -t ms-distribution:latest .
      
    - name: Run Trivy vulnerability scanner on Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ms-distribution:latest'
        format: 'sarif'
        output: 'trivy-docker-results.sarif'
        
    - name: Upload Docker security results
      uses: actions/upload-artifact@v3
      with:
        name: trivy-docker-vulnerability-report
        path: trivy-docker-results.sarif

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run SonarQube analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn clean verify sonar:sonar \
          -Dsonar.projectKey=ms-distribution \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          
    - name: Run SpotBugs security analysis
      run: mvn spotbugs:check
      
    - name: Run PMD static analysis
      run: mvn pmd:check

  notify-security-issues:
    name: Notify Security Issues
    runs-on: ubuntu-latest
    needs: [security-scan, security-testing, docker-security, code-quality]
    if: always()
    
    steps:
    - name: Check for security issues
      id: check-issues
      run: |
        if [ -f "trivy-results.sarif" ] || [ -f "trivy-docker-results.sarif" ]; then
          echo "has_issues=true" >> $GITHUB_OUTPUT
        else
          echo "has_issues=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create security report
      if: steps.check-issues.outputs.has_issues == 'true'
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ⚠️ Security vulnerabilities detected!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Please review the following reports:" >> $GITHUB_STEP_SUMMARY
        echo "- OWASP Dependency Check Report" >> $GITHUB_STEP_SUMMARY
        echo "- Trivy Vulnerability Report" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Action Required**: Review and fix security issues before merging."
        
    - name: Security scan passed
      if: steps.check-issues.outputs.has_issues == 'false'
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ No security vulnerabilities detected!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The codebase passed all security checks."
        echo "Remember to:" >> $GITHUB_STEP_SUMMARY
        echo "- Keep dependencies updated" >> $GITHUB_STEP_SUMMARY
        echo "- Review security configurations regularly" >> $GITHUB_STEP_SUMMARY
        echo "- Run local security tests before pushing" >> $GITHUB_STEP_SUMMARY
